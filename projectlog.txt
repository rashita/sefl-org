2020年09月16日

##  『僕らの生存戦略』を進めます

とりあえず、マークダウンで書いている原稿を、reファイルに直すためのスクリプトを書きました。といっても、ハッシュをイコールに置換するだけのスクリプトです。

##  『僕らの生存戦略』を進めます
2-6の整理です。

##  『僕らの生存戦略』を続けます
なんとしても、今日中に2-6を固めます、という意気込みで取りかかります。

##  『僕らの生存戦略』を続けます
うんうん悩んでいたところを、頭から書き下ろしたらすんなりできました。1400字ほどで、そこそこの仕上がりです。

なんとなくわかったのは、まったくの書き下ろしでもなく、完成した文章をちまちま直すでもない、その中間的な作業において私は詰まりやすく、だったら、まったくの書き下ろしでリスタートしたほうが、全体的に早く終わる、と言えそうです。

とりあえず、次項以降は「詰まり始めたら、頭から書き直す」を実践してみましょう。うまくいくようなら、ライティング・メソッドとして取り入れたいと思います。

2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashita's Newsletter
https://tadanori.substack.com/p/827

## 本日の振り返り

本日はぼちぼちと作業を進めました。大きく何かをやるというよりは、細切れに作業を進める感覚です。

とりあえず、『僕らの生存戦略』の原稿が少し進んだので吉としましょう。案外、細切れの方が進みやすいなんてこともあるかもしれません。今週は同じようにじんわりと作業を進めていきます。焦らないこと。

## というわけで、本日はそろそろ閉店ガラガラです。

お疲れさまでした。仕事終わりの妻を迎えに行ってきます。
2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashitas2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashitas2020年9月13日 日曜日

## 作業記録支援スクリプトのコードを整理する

作業記録から各種データを生成するスクリプト（コードネームが必要ですね）、のコードを整理しておく。まず頭の中で。

最初はすべてAppleScriptで書いていたけども、途中でPythonを挟むようになった（do shell scriptでpythonが実行できる）。

おかげで、コードの処理が錯乱している（当然）。なので、いったん整理したい。

まず、ローカルのEvernoteからデータを吸い上げるためには、AppleScriptが必要。しかし、AppleScriptでは取得したデータの処理がそれほど得意ではない。ここで、PythonからAppleScriptを呼び出すか、AppleScriptからPythonを呼び出すかの選択が取れる。

◇osascript · PyPI
https://pypi.org/project/osascript/

一応上をimportすればAppleScript的なことができるらしい。ただ、これがいつまでアップデートされ続けるかはわからないので、標準的なものだけで実装できるなら、その方が良い気はする。

仮に、AppleScriptからPythonを呼び出す、という現状の構造を維持するとする。

すると、AppleScriptは、「Evernoteからデータを取得」「do shell scriptで各種pythonやターミナルコマンドを実行する」の二つの役割だけを担うことになる。

で、Pythonはデータ処理ごとにファイルを分けておき、それぞれにデータを処理していく。

具体的には、

・Evernoteのノートのhtmlファイルを受け取ってごにゃごにゃする。
・ファイルに名前を付けて保存、ないし追記

という具合。「ごにゃごにゃ」でやることは複数あるが、

・アイデアノートを抜粋する→適切な形に変換
・プロジェクトノートを抜粋する→適切な形に変換
・あとで読むを抜粋する→適切な形に変換

という具合。「適切な形に変換」がすべて同じであれば共通の処理にまとめられるが、実際に書いてみたところずいぶん違うので、個別に書くほうが良さそう。

で、AppleScriptのスクリプトを、spotlightから呼び出せるようにそれを（スクリプトフィアイルではなく）アプリケーションファイルとして保存しているのだが、コードを編集するたびにアプリケーションファイルの上書きが発生して、スクリプト変数（終了しても保存され続ける変数）がリセットされてしまう。

よって、骨子となる部分だけはAppleScriptで書いておき、変換の細かい動作はPythonに投げることによって、日常の細かい修正はPythonだけで済むようにして、スクリプト変数を再スタートさせなくて済ませられるようになる。

あるいは、アプリケーションが上書きされるたびにリセットされてこまるようなデータは、スクリプト変数ではなく、ファイルで保存しておくのがよいのかもしれない。昔は、ファイルの扱いがまったくできなかったが、最近はいろいろ読み込みや書き込みができるようになったので、その実装も難しくないだろう。

まあ、それはおいといて、細かい編集はPythonでできるようにしておくのはわるいことではないだろう。

## メルマガの読み返しを実施します


＊　＊　＊

約40分で読み返しが終わったので、配信作業に移ります。

＊　＊　＊

配信作業も終わりました。やはり爆速で終わります。

あとはゆっくりすごします。

## DVD『カイジ　ファイナルゲーム』を観ていました

政治家の描写が古典的というか、いかにも無能でちょっと笑えました。

## enBranchと命名

Evernoteの作業記録からいろいろなファイルを作るスクリプトをenBranchと呼ぶことにしました。一瞬、分流器の意味で「シャンク」にしようかとおもったのですが、Branchの方がプログラムっぽいのでそちらを採用。

## enBranchの概要イメージ

￼

まず入力セントラルとしてEvernoteを使う（これは別のツールでもいい）。で、一日の終わりに、そのノートの中身から用途に合わせてファイルに切り出す。切り出されたファイルは、Webページの素材になったり、VS Codeのワークスペースで表示されたりして、別の人生を歩むことになる。

ログはログとして、Evernoteに残っていながら、検索や編集などアクセスしやすい状態への切り出しておく。

で、この「用途に合わせ」に拡張性を持たせておく。その辺を意識してPythonのコードが書ければ上等。

おそらく、切り分けが増えると、原稿の見出しの数では足りなくなってくる。見出しにクラスを与えて、それによって切り分けた方が良さそう。特殊な記号よりも、htmlのクラスの方が使いやすいと思うが実際はどうかわからない。

## VS Codeの拡張機能を試します

◇Edit with Shell Command - Visual Studio Marketplace https://marketplace.visualstudio.com/items?itemName=ryu1kn.edit-with-shell
◇Japanese Word Handler - Visual Studio Marketplace
https://marketplace.visualstudio.com/items?itemName=sgryjp.japanese-word-handler
2020年9月12日 土曜日

## メルマガを書きます

メルマガのような単に文章を書くだけのようなプロジェクトの情報は、あえてログファイルに残さなくてもいいかなと思うのだけども、その場合、この作業記録で見出し３が使えないことになる（見出し３は自動的にログファイルに収集されるので）。

かといって、見出し２は大きすぎる気がするし、かといって、見出しなしは見栄えがあまりよくない。

ということはどういうことか。

おなじ見出し３でも収集するものと、そうでないものを分ける？あるいは収集しない特別の印をつける？

あるいは、気にせずどんどん収集していく？

ただ、ほとんど同じことの繰り返しなので、そいうのをたとえば10年分ログすることの意義については少し考えてしまう。

やはり、特定のキーワードでの分流を検討したほうがいいか。メルマガを含むブロックは別ファイルに分ける、的な。

まあ、とりあえず、しばらくは気にせず収集してみて、見返すときにうっとうしかったらまるっと削除する、という路線でいこう。

## メルマガ前半を続けます


＊　＊　＊

とりあえず、一時間で4000字ほど書きました。すでに半分くらい書いちゃってますね。とりあえず、前半（認可こうと思っていたこと）を続けましょう。

## メルマガ前半を続けます


＊　＊　＊

30分で2000字ほど書きました。これで前半部分はおわりですね。

## 本を買いました


『リベラルの敵はリベラルにあり (ちくま新書)』（倉持麟太郎）
 『社会を知るためには (ちくまプリマー新書)』（筒井淳也）
 『経済人類学入門』（鈴木康治 作品社）
￼

## メルマガ後半を書きます


＊　＊　＊

50分で、3900字ほど書きました。全体は9500字ということで、ほぼ一回分になりました。あと二つほど原稿の予定があったのですが、少し考えましょう。

## メルマガ後半を書きます

少しだけ字数が空いているので、ごく短い本の紹介を書く事にしました。そういえば、最近メルマガで本の紹介をまったくしていなかったので、こういう隙間を埋める感じで、手短に紹介してみるのは悪くなさそうです。

とりあえずこれで本編はできました。現状で10200字くらいです。あとは「はじめに」ですね。

＊　＊　＊

「はじめに」のネタ探しに一週間分のタイムラインを読み返します。

## メルマガ「はじめに」を書きます


＊　＊　＊

一時間くらいでなんとか書き切れました。これで中身はだいたい終了です。

## 技術書典の本を漁ります


とりあえずチェックした本（買ったわけではないです）

◇技術書典9オンラインマーケット漁り - 倉下忠憲の発想工房
https://scrapbox.io/rashitamemo/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B89%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E6%BC%81%E3%82%8A
2020年9月11日 金曜日

## シゴタノ!の原稿を書きます

今回はObsidianとテキストファイルについて書いてみます。

## 『Spherize』

ゆうびんやさんの最新回が更新されました。
◇Day2 亀に乗って揺られてる｜ゆうびんや｜note
https://note.com/mailman/n/n80f9e395e08f

## 😀シゴタノ!原稿書けました。

アップします。

## 『Re:vision』の書籍化作業

Epubファイルを読み進めます。

＊　＊　＊

とりあえず、通読が終わりました。全体の構成を再検討します。

まず各ファイルの文字数から。

001 9151
002 11349
003 13859
004 16649
005 9113
006 14135

005のボリュームの小ささが若干きになる。006の冒頭は倉下の原稿なので、そちらから原稿を移植する？

005 14015
006 9567

今度は、006が短くなったが、まあ、これは最後の章なのでそれくらいでちょうどいいかも。

原稿修正の方向性：
連載時では、回と回のつなぎの文章が入っていたが、それはまるっと削れるので、削る。あと、途切れ方が違うので、その辺はメンテナンスする。

## 『Re:vision』の書籍化作業

epubを読みながらつけたハイライトの修正個所を原稿ファイルに反映させます。

＊　＊　＊

一時間ばかりかかって反映を終えました。再びepubファイルを作ります。コマンド一発で作れるのでラクチンです。

## 姪っ子にパソコンレッスン

中学生の姪っ子にパソコンを教えてきました。とりあえず第一回で、どのくらいのことを知っているか確認したので、カリキュラム作りに取り組みたいと思います。

なんだかんだで、こういうのは楽しいですね。目標は、ワードでPDF文章を作り、それをメールで添付して送信する、くらいでしょうか。

## PARA methodについて調べていました

◇The PARA Method: A Universal System for Organizing Digital Information - Forte Labs
https://fortelabs.co/blog/para/
GTDと似ていますが、少しだけアプローチが異なるオーガナイズシステム。Pproject,Area,Resource,Archiveの頭文字をとったもの。基本はプロジェクトを中心に回していく。たぶん、GTDよりも使いやすい方法論だとは想像する。
2020年9月10日 木曜日

## 『僕らの生存戦略』の執筆

まずは、2-6を固めるところから。

まずはざっと読み返しました。

## 『僕らの生存戦略』の執筆

2-6を多少読める文章に。ただ、全体はまだ固まっておらず。以前書いた原稿を参照に、もう少しこのブロックを煮込むことにします。

## 『Re:vision』の書籍化作業

epubファイルを読んで確認します。

二つ目の倉下パートを読みました。三つくらいの話が混線している感じです。並び替えというよりは、書き直した方がいいかもしれません。

## かーそる第四号の原稿を書きます

2行だけ書き足しました。微速微進。

さらに数行書き足して、この原稿で書くことをいくつかピックアップしました。それをさらに温めたのち、本格的な執筆に移りましょう。

## 「知的生産のフロンティア」について記事を書きます

R-styleになるのか、メルマガになるのかはわかりませんが。

◇知的生産のフロンティアについて考える（１） – R-style
https://rashita.net/blog/?p=30372

最近は、連載ごとにヘッダー画像（アイキャッチ画像）を作るのがマイブームです。

## 『Re:vision』の書籍化作業

2つめのTak.パートをEpubで読み進めます。

## 『Re:vision』の書籍化作業

引き続き、Tak.パートを読みます。内容を確認し、構成を考えながら読んでいるので結構時間がかかります。
2020年9月9日 水曜日

## 『僕らの生存戦略』の執筆を進めます

まずは、2-5を固めます。

＊　＊　＊

だいたい固まりました。手入れは必要ですが、方向性はこれでよし。

つづいて、2-6に進みます。ここはまだぜんぜん文章の骨子がなく文と箇条書きがとっちらかっているだけなので、それを整理するところからです。

＊　＊　＊

Progress Mapを作りました。といっても、単にテキストファイルに以下のような記述をしただけです。
￼
「←この辺」を行操作のショートカットで移動させます。

VS Codeでは、見出しだけでなく、箇条書きの下位項目も閉じられるので便利です。

## VS Codeのカスタマイズ

TODO highlightという拡張機能を入れて、progress Mapを見やすいように調整。

￼

DONE:がついている行と、TODO:がついている行の色味を変える感じです。


## 妻の昼食準備など


## 作業記録用のスクリプトを改修します

まず、現状のコードのバックアップを取っておきましょう(Gitではないのでバックアップのファイルを作成）

つづいて、HTMLファイルからjsonに変換している部分を見つけます。

ここからが、問題。どのような処理にするのか。特に、アイデアメモ以外の部分も何かしら処理することを考慮すること。

AppleScriptではなく、htmlデータを、いったんpythonに渡してもいいかもしれない、

＊　＊　＊
いったんptyhonをかませるテスト。

＊　＊　＊

ptyhonでテキストファイルへの書きだしを実行。

applescript側では、do shell scriptを実行。

do shell script "python ~/dropbox/org/convertMindgarden.py  & plist & "

plistに中身を入れておく。

ptyhonでは受け取ったデータをそのまま書き込む。

convertMindgarden.py

import sys

filepath = /Users/Tadanori/dropbox/org/data.txt

if len(sys.argv) < 2:
print(sys.argv[0])
sys.exit()

with open(filepath, mode=a) as f:
f.write(sys.argv[1])

これで、以下のようなファイルができる。

￼

上から下に並んでいるが、逆順はどうだろうか。

ただ、上に追記はちょっと面倒なことは以前も確認した（できなくはない）。いや、pythonなら結構簡単にできそう。

ということは、ｐlishへのセットを逆にして、頭に追記するようにすれば、一番先頭がトップに来るようにも作れる。

まあ、末尾はcoomand + ↓で瞬時に移動できるからどちらでもいいと言えば良いが、たとえばiPhoneなんかで開いたときは、最新がトップに来ていたほうがいいかもしれない。が、iPhoneでは、むしろMindGardenで閲覧する可能性が高い。

さて、どうするか。

いったん、散歩。

## 作業記録用のスクリプトを拡張します

新しいものを下に追記していくと、ファイルの先頭が常に同じになる。そこには変化がない。ノートと同じだが、ノートは代替わりするので、ある程度の周期で変化があるが、デジタルファイルは意図的に切り替えない限りそれがない。

上に追記していくと、開くたびにそこに変化が生まれる。それは結構楽しいはず。ただし、ファイルの上部にヘッダー要素などを書き込んでいると、ややこしいことになる。

が、書き込む行数を指定でき、ヘッダーの行数が変わらないなら、プログラムの方でなんとかできるだろう。

とりあえず、やったことがないので、上に追記型に変えてみる。

まず、配列の最後に追加していたのを最初に追加に変更する。

set end of plist to tempplist

set beginning of plist to tempplist

これで、書き込む要素が新しいもの順になった。これを、ファイルの先頭に追記する。

一度ファイルを読み込み、先頭行に追記して、その内容を書き込む、という手順。

◇Pythonでファイルの読み込み、書き込み（作成・追記） | note.nkmk.me
https://note.nkmk.me/python-file-io-open-with/

import sys

filepath = /Users/Tadanori/dropbox/org/data.txt

if len(sys.argv) < 2:
print(sys.argv[0])
sys.exit()

with open(filepath) as f:
l = f.readlines()

l.insert(0, sys.argv[1])

with open(filepath, mode=w) as f:
f.writelines(l)

できた。
￼

あとは、このテキストファイルをjsonに変換するスクリプトと、アイデアメモ以外を切り出すスクリプト。

まずは、jsonから考える。

行頭がハッシュマークなら、その行はタイトル。
ハッシュでなければ、その行は中身、という感じ。上から順に行を見ていく？

一行ごとに読み込んで、その行がハッシュで始まっていたら、それをtitleに入れる。次の行へ。
ハッシュで始まっていなければ、bodyに入れて、今tiitleとbodyに入っているものを、jsonの一データにセット、次の行へ。という感じが。

データ的に、必ずハッシュが入っている行があるので（bodyだけの行はない）、このやり方で破綻はないはず。

あと、たとえば@マークの行は読み飛ばす、とかでもいい。

まずは基本の処理。

￼

なんとか、基本の処理は書けました。

￼

だいぶ泥臭い書き方をしていますが、とりあえず通るのでよいでしょう。

￼

## 作業記録用のスクリプトを拡張します

上はまっさらな状態でファイルを作成することはできるけども、基本的にこれは「追記」するための使われる。

で、jsonファイルは単にしたに追加したらいい、というものではない。

いったんjsonのデータを読み取り、そこに追加する、という形が必要。

結構面倒ですが、とりあえず書いていきましょう。

＊　＊　＊

思ったよりは面倒ではありませんでした。冒頭にjsonファイルを読み込む処理を入れたらOK。

￼

ファイルが空っぽだとloadがエラーを吐くのでそれに対処。

￼

これで、作業記録からテキストファイルを作成、そのファイルからjsonファイルを作成（それぞれ追記スタイル）が達成できました。

ふ〜、やれやれ。

あとは、「あとで読む」とハッシュが三つついた部分の切り出しです。

ハッシュが三つついた部分は、だいたいプロジェクト関係なので、これをどう処理するか。

まず「あとで読む」は簡単で、毎日必ず項目があるので、その部分を抽出すればいい。これはアイデアノートを抜き出すのよりもずっと簡単にできるでしょう。

<h3 style="border-bottom:1.5px solid #999">あとで読む</h3><div>

が含まれているtr/tdを抽出すればOK

以下のようなHTMLが取得できます。

￼

最終的にWebページとしてアップする予定なので、プレーンテキストに変換する必要はないですね。

とりあえず、こういうファイルが作れるようになりました。

￼

このファイルの利用方法はまた考えます。

日付のデータがあってもいいかも。ノートのタイトルから取得するか、スクリプトで取得するか。

##  作業記録用のスクリプトを拡張します

問題はここから。

見出し2は時間の表示で、見出し３が雑多なメモ。見出し4がアイデアメモになっている。

見出し３を拾うと、あとで読むやおはようございますなどもひろってしまう。

拾いたくないものはh2に変えておく？　それはテンプレートの方をいじればいいから、そう難しいことではない。

h3とh4は広い、ｈ2と見出しが含まれないブロックは拾わない、というのでいいか。

あらかじめ指定しておいたプロジェクト名を含むh3があるブロックを拾うというのでもいいが、そのリストの管理が煩わしいような気もする。

高度なやり方をするならば、そのプロジェクト名でファイルを分けて保存する、となるだろう。が、そこまでやる意味はあるだろうか。

あるのはあるか。たとえば、追記されたらファイルのタイムスタンプが更新されるので、そのファイルの時系列のソートが、そのまま「最近着手したプロジェクトリスト」になる。

たとえば、プロジェクト名は、必ずかぎかっこでかこうようにして、その中の文字列でファイルを探し、ファイルがあればそこに追記、なければ新規作成。かぎかっこがないものは、統一的なファイルに保存する、という形もありえる。

さて。

＊　＊　＊

￼

上のような文字列をキーにすればいいわけだ。

とりあえず、細かく分けずに一つのファイルにまとめるようにしてみる。

￼

みだし行には何か記号を加えたほうがいいかもしれない。

冒頭に日付を入れる？

いったん散歩します。

## 作業記録用のスクリプトを拡張します

よく変更する可能性のある処理は、pythonで書いておく、という切り分けが良さそう。
AppleScriptは、Evernoteからデータを持ってくるごく基本的な部分に限定しておくのが良いと思われ。

とりあえず、日付を入れるようにしました。

￼

これで、だいぶそれらしくなってきましたね。

あとで読むの方にも日付を加えました。

￼

これで基礎的なものはだいたいOKです。ただし、コードがやたらめったらとっちらかってますね。

よくよく考えたら「あとで読む」の文字は要らないので、それを日付と差し替えました。

￼

これで骨子はできたと思います。とりあえず、数日様子を見ましょう。

あ〜、疲れた。
