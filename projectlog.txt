2020年10月07日

##  『僕らの生存戦略』を進めます
本日は、アテンションの部分を固めましょう。

＊　＊　＊

40分ほどかけて、2200字をまとめました。最後の段落だけ少しまとまっていませんが、そこはいったん保留にしておきましょう。

テキストファイル内にも、「ここはいったん保留」とtodoを書き込んでおきます。

いったん他の原稿に着手します。

##  かーそる用の原稿を読み返してチェックします

とりあえずざっと読み返して、Evernoteの共有ノートブックにアップロードしました。

さらにepub版を作ってから、推敲を進めることにします。

なんであれ、「いったん区切る」というのが大切ですね。

##  『Re:vision』
20分だけ、原稿の手直しをします。

＊　＊　＊

section-01を読み返しました。誤字脱字は減り、文章の読みやすさは上がっていますが、まだ全体的な一本筋が通っている感覚が小さいですね。一度アウトラインを抽出してみましょうか。

＊　＊　＊

chap （倉下）デイリータスクリスト
○簡単に使えるデイリータスクリスト
○一番簡単なデイリータスクリストの作り方
○「今日やること」を構成する要素
・3-1 今日やることは何か？
○デイリータスクリストの理想と現実
・4-1 理想のタスクリスト
・4-2 無残な現実の姿
・4-3 現実に備える
○リストが変えるもの、変えないもの
・5-1 管理が変えるもの、変えないもの
・5-2 認識が変えるもの
○理想との乖離が生む無残さ
・6-1 理想と現実の切り分け
○理想は理想的なのだろうか
・7-1 脱構築される理想と現実
・7-2 妥協ではないやり方で%

『僕らの生存戦略』用に作ったスクリプトを転用して、reファイルから見出しを抜粋するスクリプトを作成。第一章の原稿に走らせたところ。

項目の区切り方も変えたいところだけども、それより先に流れを整えたい。

2020年10月07日

##  『Spherize』にとりかかりましょう
まずは何を書くのかを考えます

2020年10月06日

##  インクリメンタルな環境改善
この作業記録は、自作マークダウン風記法で入力して、それを変換スクリプトでHTMLタグに変換している。で、そのタグに合わせて、一日の終わりに情報処理を行っている。が、たまに一日で一回も変換スクリプトを走らせることなく、そのまま一日を終わらせてしまうことがある。そうすると、情報処理(enbranch）を走らせても、何の情報も取得されない。そういうミスが2度くらいあった。こういうときに、「次からは気をつけよう」などと考えるのではなく、「そうだ。一日の終わりに走らせるスクリプトの手間に、変換スクリプトを呼び出しておけばいいのではないか」と考えるのがプログラマ・マインドである。ライフハッカ・マインドも同様だ。
##  『僕らの生存戦略』
いったん書くことを整理します（ファイル分け）。ファイル内で書きたいことをまとめていき、その後ターナルでｍake mainして、全体のアウトラインを確認する、という手順。断片的執筆法では、ファイルの分割は自由に行える。たとえば、どこかのファイルで以下のように書いていて、上のブロックと下のブロックは、本当にこの順番でいいのか、逆の方がよいのではないかと思ったら、とりあえず下を切り出してみる。で、このままでもいいけれども、このファイルをimportしているファイルに記述を振り替える。これで、この行の上下を入れ替えるだけで、本文での配置が逆になる。アウトライナーだ。重要なのは、上の配置にすることで、具体的な記述から一歩離れて、「この二つはどちらを先に配置した方がいいか」について考えられるようになる点だろう。文章があると、記述に引きずられてしまって、なかなかそうした思考ができないことが多い。とりあえず、全体の流れを俯瞰して、この配置で良さそうと思ったら、それに合わせて文章の素材をそれぞれのファイルに割り振っていく。「もしかして、別のバージョンならこう使うかも」的な可能性は一切捨てる。でないと、また書けなくなっていく。
##  『僕らの生存戦略』
『ATTENTION』という本を参照しながら、次のブロックの内容を固めていきます。やはり、ファイルが切断されていると集中しやすいですね。
2020年10月05日

2020年10月05日

2020年10月03日

2020年10月02日

##  『Spherize』
ゆうびんやさんの最新回が更新されました。◇Day5 日記でカメ島の生態系を育む｜ゆうびんや｜notehttps://note.com/mailman/n/n9d54a2c36025
##  読み仕事のマネジメント
現状、『僕らの生存戦略』は書き下ろしの作業で、かーそるは読み返しの作業で、『Re:vision』も読み返しの作業に入っている。考えたいのは、読み返しの作業をいかに進めるのか、という点。読むことは、書き下ろすに比べると認知資源を使わないので、わりとどの時間帯でも実行できるメリットはある。その点を考慮して、どうマネジメントしていくのか。同じものを、何度も読むようにするのか。それとも、一つ読む度に別の原稿にシフトしていくのか。読むための環境はどう整えたらいいか。成果物が、PDFやEPUBならばその形で読めばいいが、かーそるは、まだそれを作る段階ではないので、ではどうするか。「読み仕事」用の原稿を（あるいはそのリンクを）どこかに集めておいて、すぐに読み返しが必要な原稿にアクセスできるようにするか。
##  『僕らの生存戦略』
時間がないので、二行だけ書き足しました。
##  『Re:vision』
時間がないので、一ブロックだけ読み返しました。
##  読み仕事のマネジメント
読み返すものが、テキストファイルに限定されているならば、それだけを集めるVS Codeのワークスペースを作っても面白いかもしれない。該当のファイルを含むプロジェクト・フォルダを取り込み、ワーキングなファイルをタブに表示しておいて、そのワークスペースを開けば、読み直すファイルに即座にアクセスできる、というもの。
2020年10月01日

##  まずはかーそるの原稿を書きます
中盤が停滞していたので、いったん状況を整理します。

＊　＊　＊

頭から読み返したら、なんとなく方向が見えてきました。読み返しても方向が見えてこないばかりか、むしろ混乱が深まることも少なくないので、とりあえずは一安心です。

ざっと書き進めていきます。

＊　＊　＊

一時間で、だいたい2600字ほどがまとまりました。あと２ブロックくらいで完成です。

##  かーそる原稿を続けます
あともう少し。

＊　＊　＊

書けた。書けました。これでかーそる用のメイン原稿（のラフ）はお終いです。

あとは、少しずつ読み返しながら手を加えていくだけでOKです。

2020年10月01日

##  かーそるの原稿を続けます
今日中に、この原稿は固めておきたいところです。

＊　＊　＊

二十分ほどでブロック一つをかためました。あと二つくらいです。

＊　＊　＊

勢い良く、20分で続きの２ブロックも固めました。あとは、ラスト一ブロックを書くだけです。

＊　＊　＊

ラストワンブロックも書けました。この原稿はOKです。

やはり朝に書く原稿は捗りますね。

##  かーそる原稿を続けます
今日はもう、思い切ってこれだけを着手しましょう。

##  かーそる原稿を続けます
最後の原稿で、何を書くのかをもう少し詰めます。

＊　＊　＊

主題はなんだろうな。「なぜ勉強ノートを書くのか」あたりか。

##  かーそる原稿
今一つ煮詰まらず。まあ、焦らずにいきましょう。原稿が進んでいることは間違いないので。

2020年09月30日

##  『Spherize』の第五回を書きます
まずは、前回の読み返しから。

＊　＊　＊

積読リストについては、いったんこれでよとして、次は本丸の「読書について」を書きたいところですが、いまいちどう書き締めるかの具体像が浮かんできません。もうちょっとだけ考えます。

##  『Spherize』を書きます


##  『Spherize』を書きます
なんとか、この時間で書き上げたいところです。

＊　＊　＊

書き出し始めると、早いですね。20分ほどで書けました。

◇第五回:正解のない本の読み方｜倉下忠憲｜note
https://note.com/rashita/n/ndbece7d51385

##  『僕らの生存戦略』
待ち時間に原稿の直しです。「強力になる広告」を直しました。

2020年09月28日

##  『僕らの生存戦略』の執筆を続けます
今日は戦略が持つ有限性についてです。

＊　＊　＊

1時間で2000字くらいまで膨らみました。が、文章はまだ粗いです。もうちょっと手入れが必要です。

##  『僕らの生存戦略』を続けます。
最低限、この単元だけでも終わらせておきたいです。

＊　＊　＊

2500字まで膨らみ、1500字くらいの部分でこの単元を切ってもいいかな、という気がしてきました。1000字から1500字で刻んでいく感覚を、この章では大切にしたいと思います。

＊　＊　＊

1500字ほどをいったん確定させ、bodyに取り込みます。それで全体は13000字ほどになりました。

うん、この感覚は良いですね。細かく書いて統合。そして全体の確認。

＊　＊　＊

make main で全体のアウトラインをtoc.txtに作成していたが、どうせそのtxtを直接編集することはないのだから、テキストファイルではなく、ターミナルに直接出力すればいいのではないか。

あるいは、テキストファイルを作成しつつ、そのファイルを開くのではなく、catする。

＊　＊　＊

toc.txtを作っておけば、それをVS Codeで開いて、マークダウンモードにすれば、下位項目の開閉ができる（foldingできる）。だから、一応toc.txtを作っておくのは有効だと思う。ただ、全体を一覧したいだけならば、catでも十分。しかも、catなら、VS Codeはターミナルが下に表示されているので、別ウィンドウで横に並べる必要もない。

＊　＊　＊

とりあえず、個別のファイルに断片的に執筆していく方法を、断片的執筆法（fragments writing）と呼ぶことにしました。

2020年09月27日

2020年09月26日

2020年09月25日

##  『僕らの生存戦略』
少しだけ原稿を触ります。

＊　＊　＊

500字ほど増えました。これまたまずまず。

2020年09月24日

##  『僕らの生存戦略』の執筆
第二章の続きから書きます

＊　＊　＊

「デザインについて」の項目の「書き出し」を考えていました。まだ少しまとまっていません。

##  『僕らの生存戦略』の執筆
「デザインについて」の部分を30分ほど書きました。1000字ほどです。

＊　＊　＊

断片的な文章群から、本体となるテキストファイルを作る、という構想で、昨日までは、body.mdの中に、import指示があったら、そのファイルを読み込んでテキストを合わせて出力するという感じを想定していたが、「import指示があったら、そのファイルを読み込んでテキストを合わせて出力する」を再帰的に書いていたので、import指示されているファイルにimport指示があっても不都合なく動くことがわかった。

これで、別の書き方が可能となる。



昨日まで想定していたのは、上の書き方。

今日やったのは、下の書き方。

bodyには、「デザイン思考について」のファイルがimportされており、「デザイン思考について」のファイルには、「デザインについて」のファイルがimportされている。

もともと、「デザイン思考について」を書いていて、そこに書き切れなかった部分を別ファイルとして書き出したの「デザインについて」だったので、この連結は自然なスタイルだと言える。

もちろん、こうやってバラバラになっていても、出力される002.mdはすべての文章が、自分の意図通りに配列されている。素晴らしい。

そうなると、Scrapboxボックスみたいに「選択した範囲を別ファイルとして切り離し、そのファイルのimport文を代わりに差し込む」機能が欲しくなる。VS Codeの拡張として書かなければならないだろう。ある意味、練習としてはちょうどよいかもしれない。

##  『Re:vision』の読み返しを進めます
epubの倉下パートを読み返します

＊　＊　＊

二回目の通読＆修正が終わりました。epubファイルを作り直して、第三回目の読み返しに備えます。

＊　＊　＊

『Re:vision』で行うコマンドラインの作業を整理。

review-epubmaker config.yaml
作成したepubファイルをiBookアプリで開く

結城タスクのコマンドに、上記を対応させて考える。

＊　＊　＊

次の読み返しは、見出しではなく「■」になっている部分を見出しに変える。

＊　＊　＊

makefileを作った。



こうなると、todoもこちら側で記述しておきたい気持ちが芽生えてくる。

とりあえず、tコマンドでtodo.txtが開くようにエイリアスを設定。

alias t='code todo.txt'

これに加えて、各フォルダでタスクをtodo.txtで管理しておけばｔコマンドだけでタスクの編集が可能になる。ちなみに、codeコマンドはVS Codeを起動させるコマンド。VS Codeからインストール可能。

＊　＊　＊

結城タスクとの違いは、VS Codeでターミナルを動かしているので、cdでのフォルダの移動がなく、フォルダの移動時にtodoを表示させる、というトリガーがないこと。この代替を考えたい。

2020年09月23日

##  『僕らの生存戦略』を進めます
「デザイン思考」について新しく作ったファイルに書きます。＊　＊　＊35分で、約2000文字書きました。目覚ましい進捗です。今回使わなかった素材メモは、新しいファイルを作ってそこにコピペしました。この作業を繰り返していきます。＊　＊　＊chap2のbody全体は9800字ほど。この結果も一覧したいですね。ファイルを作るのではなく、単純にprint()してもいいかも。つまり、chapフォルダのbodyに原稿を集めるそれぞれの原稿の文字数を表示するという二つのことをやるわけです。別のファイルにコードを書いてimportする手もありますね。
##  かーそるの原稿を書きます
今日こそは書きます。＊　＊　＊まずは一時間で、1200文字の進捗。まずまずです。
##  『Re:vision』の書籍化作業を進めます
epubファイルを読み進めます＊　＊　＊file004(tak.パート）を読み返し、原稿を修正しました。とにかく今は、連載だったときの回と回の切れ目をいかにスムーズに読めるようにつなぎ直すのかが課題です。それがおわって、一通り通して読んで違和感がなくなったら、より細かい修正に入ります。
##  結城タスクの研究です
◇結城タスクのログの研究 - 倉下忠憲の発想工房https://scrapbox.io/rashitamemo/%E7%B5%90%E5%9F%8E%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E3%83%AD%E3%82%B0%E3%81%AE%E7%A0%94%E7%A9%B6今考えているのは、断片的な文章とbodyから本文を形成するコマンドを走らせたときにログを残すこと。いかなるログを残すと、後から便利かを考えたい。そのコマンド（bodymakeと暫定的に呼称）を実行した日時を残すだけならば簡単。他にどのようなデータが残しうるか。その日触った章や、その文字数などもログに残す？
##  自分のログについて
ログについては、どのような記録を残すのかと、その記録をどう表示させるのかがあり、それらは関係している。現状は、執筆プロジェクトごとにフォルダを作っているので、結城タスクと似たような管理は可能。ただし、ブログの更新などはターミナルでｍakeすることは無いので、そのログは残らないことになる。あるいは、新規テキストファイルの作成をmake経由で行えばよいのかもしれない。その点は要検討。では、プロジェクト名＝フォルダ名は残すとして、それ以外にはどんな記録がありえるだろうか。本の執筆であれば、触った章があるだろう。だとしたら、どのようなmakeの動作にすればいいだろうか。スクリプトを走らせたフォルダ名が記録に残るなら、osないしは、os/002のどちらかが実行対象となる。しかし、これがサブフォルダであるということは、ログを記録するスクリプトからは見えてこない。osにいて、コマンドラインの引き数で（たとえば、make 002）などとしたときに、フォルダ名と引数をセットで記録する、というやり方はありえる。ということを考えていくと、章の記録を残すのはやや面倒にも思えてきた。章ごとのフォルダの名前を、os_002とかにすれば、簡単に解決はできるが、ちょっとダサイ点は否めない。若干話を広げすぎている気がするので、まず小さいところから考えよう。いったん、図を書いて整理します。
##  結城タスクの研究
◇結城タスクのコマンド群の研究 - 倉下忠憲の発想工房https://scrapbox.io/rashitamemo/%E7%B5%90%E5%9F%8E%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E7%BE%A4%E3%81%AE%E7%A0%94%E7%A9%B6確認していたが、別にコマンドは一つでなくてもよい。自分が主に繰り返して行う作業を抽象化して、それをmakefileに落とし込めばいいだけだ。その観点で、整理できると思う。
2020年09月22日

##  『僕らの生存戦略』
第二章ではなく、全体のアウトラインを確認します。

＊　＊　＊

章ごとにファイルが分割されているので、アウトライナーのように「本全体のアウトライン」は確認しにくい。なので、Pythonで原稿ファイルすべてを精査して、そこに含まれる見出し行を拾ってきて、toc.txtに書き出す、というスクリプトを使っている。

が、第二章をepubで読めるように環境を整えたとき、原稿に手を加えた。これまでは、全体を意識した見出しレベルを設定していた。つまり、本のタイトルがh1で、各章のタイトルがh2といった具合に。一方で、Re:VEIWでは一つのファイルに見出し1が一つなければならない。なので、第二章のファイルでは見出しのレベルが全体的に一つ上がっている。

その状況で、「本全体のアウトライン」を作ると、当然のように見出しレベルが不整合になってしまう。これをどう解決するか。

一つには、その他の章も第二章と同じように見出しレベルを上げること。どうせそれらのファイルでもepubファイルを作ることになるのだから、別段不都合はない。

もう一つの方法は、全体のアウトラインの方に準拠して、Re:VIEWでepubにするときに、見出しレベルを変更するという方法。

どちらも、全体としては対して違いはない。作業そのもののややこしさも同程度（どちらも簡単）である。

一方で、それぞれの原稿ファイルを開いたときの「感触」は違ってくる。

Re:VIEWに準拠すると、そのファイルの一番上の見出しは章のタイトルである。つまり、そこでは第二章が「全体」となる。一方で、本全体のアウトラインに準拠すると、「全体」は当然本全体であり、第二章はその「部品」となる。

この違いは、執筆においてどのような違いを生み出すだろうか。つまり、認知的、心象的に。

##  『僕らの生存戦略』
これまで第二章の原稿ファイルには、「今書いている原稿」と、「以前書いた原稿で使えそうな部分をコピペした部分」が混ざっていたが、そうすると、できている部分の文字数がわかりにくいので、きちんとわけることにしました。

やっぱり横着してはいけませんね。

＊　＊　＊

少し考えましたが、各章の見出しレベルは本全体に揃えることにします。epubにするときに、見出しレベルを変換する、という方向で。

＊　＊　＊

第二章の見出しは、現状「2-1-1」のような形で自分でナンバリングを振っていたが、それもtocを作るときに、自動的に採択するように変更しよう。



という感じ。

原理的には、章ごとのファイルではなく、項目ごとにファイルを分けて管理することも容易。でも、それが望ましいのかは不明。

自分の感覚だと、だいたい2000字（長くて１万字）が「一呼吸」なので、その粒度でファイルを作ってみてもいいのかもしれない。

一度やってみよう。第二章なら第二章のフォルダを作り、そこに分割したテキストファイルをいれる。

＊　＊　＊

まずchapというフォルダを作り、そのなかに002というフォルダを作った。そこにもともとの原稿ファイルを移動させ、中身を分割する。

分割の際は、全項目を分割するのではなく、「ここまで書けている部分」と、「書けていないけれども、材料だけ書きつけてある部分」（ようは未完成の部分）に分けて、後者だけ項目ごとにファイルに分ける。つまり、完成している部分はひとつながりのファイルになっている。

で、細かく分割された部分で原稿を書き、完成したら完成している部分にコピペする。pull requestとmargeの関係。

これはアウトライナーにおける「ズーム」のようなものだ。

あとは、「ズームアウト」ができればいい。それは個々の原稿から全体の原稿を作り、そこから、さっきのTocでアウトラインを作れればいい。あとで少しまとめる。

##  『僕らの生存戦略』の新体制
イメージ図。



個々のファイルを統合してchapを作る。あるいは、bodyの中で、項目の原稿ファイル（名）を指定して、それをもとにビルドする、という感じ。

ちょっとこの体制を組み立てていきたいですが、先に『Spherize』の原稿を書いておきましょう。

##  『Spherize』の原稿
今回は積読リストの作り方、という話をする予定です。

＊　＊　＊

書けました。

◇第四回:積読リストをいかに作るか｜倉下忠憲｜note
https://note.com/rashita/n/n11fd0624e1d3

いろいろな伏線が張られた回でした。

##  執筆統合体制作り
どのようなスクリプトを書けばいいか。

素材となるフォルダを走査する。あるいは規定のファイル名を探す。

規定のファイル内に含まれているテキストを集める。

フォルダの中身のテキストを自動的に集めるとなると、順番が問題になってくる。ということは、Wordpressのように、何かしらのファイルを読み込んで、そのファイルから別のファイルを読み込む指定がいいかな。

通常は、body.txt→chap名.txtでそのまま中身を出力する感じ。

で、行にファイル名の指定があれば、そのファイルを読み込んで、そのまま中身を出力する感じ。

だとすれば、入れ子状にできるな。

##  執筆統合環境体制作り
まず、骨子ができました。



今はファイル名とフォルダを先に指定していますが、これを探索できるように変えればだいたいOKです。

素材となる要素。




出力されるファイル。



これで、細切れにファイルを書いていっても、コピペすることなく、統合ファイルができます。

##  執筆の分離
ファイルを分けて執筆しても、簡単に統合できるようになったので、今後は細かい単位で書いていくことにする。一番身近なのは2000字だろう。

一方、今書いているのは、もう少しだけ長い文章である。5000字〜10,000字。

仮に一つの章のボリュームを2万字だと考えるなら、それを三分割すると、一つが6000~7000字。そう悪くないボリュームではある。

２万字の文章を一気に書き上げる気持ちではなく、まず6000~7000字の文章を書き上げる気持ちで行く。でもって、それを2000字の文章3~4個で構成する、という気持ちで取り組むとよいかもしれない。

ちなみに、現状2-1パート（三分の一想定）は、8000字くらいで、まあまあの範疇に収まっている。でもって、こういう自分が単位として認識している粒度の文字数がぱっとわかるのが、細かい単位でファイルを作ることのメリットだと思う。

##  ファイルの統合
Pythonで特定のフォルダの中を探索する場合、os.walkを使う手があるらしい。

for foldername,subfolders,filenames in os.walk(folder):

のような感じ。

2020年09月21日

##  『僕らの生存戦略』の書き方・スタイルについて
ここ数日、『僕らの生存戦略』をもっと違った文体で書けないか、という思いが頭を締めている。おそらく、もっとラフに、もっとあけすけに書かれた魅力的な文章を読んだからだろう。

現状は、考察系エッセイという体裁になっている。それは第一章と第二章の内容から考えれば、ある程度仕方がない面もある。続く第三章では、それを変えられないだろうか。そして、その変化を第一章、第二章に波及させられないだろうか。

一時的に読んだ文章に「あてられて」いるだけかもしれないが、検討しておきたい課題ではある。

たとえば、その文体なら、第一章、第二章はどのように書かれるだろうか。

自分語りの中で、タテ社会の性質を論じることができるだろうか。そもそも、タテ社会の性質を論じる必要性はどれだけ高いだろうか。

結構根本的な疑問に至っているが、必要だと感じる。今日はこれについて考え込む。

##  『僕らの生存戦略』の内容についての検討のつづき
たとえば、第二章では、戦略やデザインについて書いている。これをどのように語り直すことができるだろうか。

タテ社会の話で言えば、自分を起点にすることで、「なぜ私はズレを感じたのか。そしてどのような行動を取ってきたのか」を語り、私と社会の構造のズレ、という形で語り直せる。

では、戦略とデザインではどうか。はじめから「戦略やデザイン」を意識して行動していたわけではなく、結果的にそういうものだった、という認識なので、同じ形は使えない。

ではどうするか。結果的にそうだった、振り返ってみればそうだった、という率直な話し方もできる。他にはどうか。

一見何の関係もないように、デザインの話をすることもできる。謎解きミステリー。

語り方は無数にある。そのどれを選択するのか。

2020年09月20日

2020年09月20日

2020年09月19日

2020年09月18日

##  『僕らの生存戦略』
深呼吸をして、2-7改め2-2-1を書きます。昨日の感じから言うと、すでに書いてある文章を「調整しよう」とすると詰まるので、むしろ新しく書き下ろす気持ちで少し書いてみます。

＊　＊　＊

まず、331文字書けました。いくつか調べることが出てきたのでいったんストップ。まずは順調な滑り出しです。

##  enBranchの改修
朝の作業記録の作成時に、冒頭の一文が読み込まれていないようなので、原因をチェックします。

＊　＊　＊

テンプレートを修正したときに、置換対象にしていた文字列を消してしまったようです。文字列を追加したので、明日からは大丈夫でしょう。

2020年09月16日

##  『僕らの生存戦略』を進めます

とりあえず、マークダウンで書いている原稿を、reファイルに直すためのスクリプトを書きました。といっても、ハッシュをイコールに置換するだけのスクリプトです。

##  『僕らの生存戦略』を進めます
2-6の整理です。

##  『僕らの生存戦略』を続けます
なんとしても、今日中に2-6を固めます、という意気込みで取りかかります。

##  『僕らの生存戦略』を続けます
うんうん悩んでいたところを、頭から書き下ろしたらすんなりできました。1400字ほどで、そこそこの仕上がりです。

なんとなくわかったのは、まったくの書き下ろしでもなく、完成した文章をちまちま直すでもない、その中間的な作業において私は詰まりやすく、だったら、まったくの書き下ろしでリスタートしたほうが、全体的に早く終わる、と言えそうです。

とりあえず、次項以降は「詰まり始めたら、頭から書き直す」を実践してみましょう。うまくいくようなら、ライティング・メソッドとして取り入れたいと思います。

2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashita's Newsletter
https://tadanori.substack.com/p/827

## 本日の振り返り

本日はぼちぼちと作業を進めました。大きく何かをやるというよりは、細切れに作業を進める感覚です。

とりあえず、『僕らの生存戦略』の原稿が少し進んだので吉としましょう。案外、細切れの方が進みやすいなんてこともあるかもしれません。今週は同じようにじんわりと作業を進めていきます。焦らないこと。

## というわけで、本日はそろそろ閉店ガラガラです。

お疲れさまでした。仕事終わりの妻を迎えに行ってきます。
2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashitas2020年9月15日 火曜日

## enBranchの作成

まずは、pythonにデータ処理機を切り分ける原形的なコードを書きます。

といっても、これだけです。

￼

Evernoteで選択しているノートからそのhtmlコンテンツを抜き出して、パソコンのコマンドライン引数として渡す。で、後の処理は、Python側で書けばOKです。

で、次にこの作業記録をマークダウンっぽく変換しているスクリプトの変更です。見出し３を中心にして、いろいろなclass指定をつけるやり方です。それはまた次回にしましょう。少しずつ進めます。

## 『Re:vision』の書籍化作業

epubファイルをiPhoneで読み返します（epub通読二回目）。

とりあえず、1-1を読み返しました。これも、小刻みに進めていきましょう。

## 『僕らの生存戦略』第二章を進めます

2-6で言いたいことをまとめます。

## 『僕らの生存戦略』第二章を進めます

引き続き、2-6で言いたいことをまとめます。

＊　＊　＊

前半部分は少し固まりました。中盤から後半がやや難関です。

＊　＊　＊

第一章のepubファイルはでんでんコンバーターで作りましたが、第二章以降はRe:VIEWで作る予定なので、その環境のセットアップが必要ですね。

## 『僕らの生存戦略』のRe:VIEWをセットアップします

まず、initiするためのフォルダを準備します。epubフォルダとしましょう。ただし、以前でんでんコンバーター用に同名をフォルダを作っていたので、そちらをリネームします。

% mv epub denden

この段階で、フォルダ名はepubではなくreviewの方がいいのではないかと思い至った。なにせreviewではPDFも作れるわけだから。

しかしまあ、「epubを探そう」→epubフォルダを探す、という流れはわりとナチュラルな気がするので、epubでいいかもしれない。

% review init epub

問題は、原稿をマークダウン方式で書いているけれども、reviewの記法はそれとは違う、という点ですね。

とりあえず、PDFとepubファイルがコマンドラインで作れるようになりました。


## 『AI崩壊』を観ました。

映画気分が高まったので、二日続けて映画視聴。全体的にまあまあというか、SF好きだとちょっと物足りない感じ。日本の将来はこのままではない、という未来感が『カイジ　ファイルナルゲーム』とまったく同じだったのは、ちょっと印象深かったです。

## 少しだけコードを書きます。

この作業記録の見出し変換スクリプトを改良します。

コードを書き換えて、h3にいくつかのクラスをつけるようにしました。後はそれを仕分けするだけです。

## ブログ周りの更新です

◇:: ローソンは鬼滅、ファミマは刀剣 | コンビニBLOG ::
http://rashita.jugem.jp/?eid=4579

◇古くて新しい回帰 - Rashitas2020年9月13日 日曜日

## 作業記録支援スクリプトのコードを整理する

作業記録から各種データを生成するスクリプト（コードネームが必要ですね）、のコードを整理しておく。まず頭の中で。

最初はすべてAppleScriptで書いていたけども、途中でPythonを挟むようになった（do shell scriptでpythonが実行できる）。

おかげで、コードの処理が錯乱している（当然）。なので、いったん整理したい。

まず、ローカルのEvernoteからデータを吸い上げるためには、AppleScriptが必要。しかし、AppleScriptでは取得したデータの処理がそれほど得意ではない。ここで、PythonからAppleScriptを呼び出すか、AppleScriptからPythonを呼び出すかの選択が取れる。

◇osascript · PyPI
https://pypi.org/project/osascript/

一応上をimportすればAppleScript的なことができるらしい。ただ、これがいつまでアップデートされ続けるかはわからないので、標準的なものだけで実装できるなら、その方が良い気はする。

仮に、AppleScriptからPythonを呼び出す、という現状の構造を維持するとする。

すると、AppleScriptは、「Evernoteからデータを取得」「do shell scriptで各種pythonやターミナルコマンドを実行する」の二つの役割だけを担うことになる。

で、Pythonはデータ処理ごとにファイルを分けておき、それぞれにデータを処理していく。

具体的には、

・Evernoteのノートのhtmlファイルを受け取ってごにゃごにゃする。
・ファイルに名前を付けて保存、ないし追記

という具合。「ごにゃごにゃ」でやることは複数あるが、

・アイデアノートを抜粋する→適切な形に変換
・プロジェクトノートを抜粋する→適切な形に変換
・あとで読むを抜粋する→適切な形に変換

という具合。「適切な形に変換」がすべて同じであれば共通の処理にまとめられるが、実際に書いてみたところずいぶん違うので、個別に書くほうが良さそう。

で、AppleScriptのスクリプトを、spotlightから呼び出せるようにそれを（スクリプトフィアイルではなく）アプリケーションファイルとして保存しているのだが、コードを編集するたびにアプリケーションファイルの上書きが発生して、スクリプト変数（終了しても保存され続ける変数）がリセットされてしまう。

よって、骨子となる部分だけはAppleScriptで書いておき、変換の細かい動作はPythonに投げることによって、日常の細かい修正はPythonだけで済むようにして、スクリプト変数を再スタートさせなくて済ませられるようになる。

あるいは、アプリケーションが上書きされるたびにリセットされてこまるようなデータは、スクリプト変数ではなく、ファイルで保存しておくのがよいのかもしれない。昔は、ファイルの扱いがまったくできなかったが、最近はいろいろ読み込みや書き込みができるようになったので、その実装も難しくないだろう。

まあ、それはおいといて、細かい編集はPythonでできるようにしておくのはわるいことではないだろう。

## メルマガの読み返しを実施します


＊　＊　＊

約40分で読み返しが終わったので、配信作業に移ります。

＊　＊　＊

配信作業も終わりました。やはり爆速で終わります。

あとはゆっくりすごします。

## DVD『カイジ　ファイナルゲーム』を観ていました

政治家の描写が古典的というか、いかにも無能でちょっと笑えました。

## enBranchと命名

Evernoteの作業記録からいろいろなファイルを作るスクリプトをenBranchと呼ぶことにしました。一瞬、分流器の意味で「シャンク」にしようかとおもったのですが、Branchの方がプログラムっぽいのでそちらを採用。

## enBranchの概要イメージ

￼

まず入力セントラルとしてEvernoteを使う（これは別のツールでもいい）。で、一日の終わりに、そのノートの中身から用途に合わせてファイルに切り出す。切り出されたファイルは、Webページの素材になったり、VS Codeのワークスペースで表示されたりして、別の人生を歩むことになる。

ログはログとして、Evernoteに残っていながら、検索や編集などアクセスしやすい状態への切り出しておく。

で、この「用途に合わせ」に拡張性を持たせておく。その辺を意識してPythonのコードが書ければ上等。

おそらく、切り分けが増えると、原稿の見出しの数では足りなくなってくる。見出しにクラスを与えて、それによって切り分けた方が良さそう。特殊な記号よりも、htmlのクラスの方が使いやすいと思うが実際はどうかわからない。

## VS Codeの拡張機能を試します

◇Edit with Shell Command - Visual Studio Marketplace https://marketplace.visualstudio.com/items?itemName=ryu1kn.edit-with-shell
◇Japanese Word Handler - Visual Studio Marketplace
https://marketplace.visualstudio.com/items?itemName=sgryjp.japanese-word-handler
2020年9月12日 土曜日

## メルマガを書きます

メルマガのような単に文章を書くだけのようなプロジェクトの情報は、あえてログファイルに残さなくてもいいかなと思うのだけども、その場合、この作業記録で見出し３が使えないことになる（見出し３は自動的にログファイルに収集されるので）。

かといって、見出し２は大きすぎる気がするし、かといって、見出しなしは見栄えがあまりよくない。

ということはどういうことか。

おなじ見出し３でも収集するものと、そうでないものを分ける？あるいは収集しない特別の印をつける？

あるいは、気にせずどんどん収集していく？

ただ、ほとんど同じことの繰り返しなので、そいうのをたとえば10年分ログすることの意義については少し考えてしまう。

やはり、特定のキーワードでの分流を検討したほうがいいか。メルマガを含むブロックは別ファイルに分ける、的な。

まあ、とりあえず、しばらくは気にせず収集してみて、見返すときにうっとうしかったらまるっと削除する、という路線でいこう。

## メルマガ前半を続けます


＊　＊　＊

とりあえず、一時間で4000字ほど書きました。すでに半分くらい書いちゃってますね。とりあえず、前半（認可こうと思っていたこと）を続けましょう。

## メルマガ前半を続けます


＊　＊　＊

30分で2000字ほど書きました。これで前半部分はおわりですね。

## 本を買いました


『リベラルの敵はリベラルにあり (ちくま新書)』（倉持麟太郎）
 『社会を知るためには (ちくまプリマー新書)』（筒井淳也）
 『経済人類学入門』（鈴木康治 作品社）
￼

## メルマガ後半を書きます


＊　＊　＊

50分で、3900字ほど書きました。全体は9500字ということで、ほぼ一回分になりました。あと二つほど原稿の予定があったのですが、少し考えましょう。

## メルマガ後半を書きます

少しだけ字数が空いているので、ごく短い本の紹介を書く事にしました。そういえば、最近メルマガで本の紹介をまったくしていなかったので、こういう隙間を埋める感じで、手短に紹介してみるのは悪くなさそうです。

とりあえずこれで本編はできました。現状で10200字くらいです。あとは「はじめに」ですね。

＊　＊　＊

「はじめに」のネタ探しに一週間分のタイムラインを読み返します。

## メルマガ「はじめに」を書きます


＊　＊　＊

一時間くらいでなんとか書き切れました。これで中身はだいたい終了です。

## 技術書典の本を漁ります


とりあえずチェックした本（買ったわけではないです）

◇技術書典9オンラインマーケット漁り - 倉下忠憲の発想工房
https://scrapbox.io/rashitamemo/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B89%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E6%BC%81%E3%82%8A
2020年9月11日 金曜日

## シゴタノ!の原稿を書きます

今回はObsidianとテキストファイルについて書いてみます。

## 『Spherize』

ゆうびんやさんの最新回が更新されました。
◇Day2 亀に乗って揺られてる｜ゆうびんや｜note
https://note.com/mailman/n/n80f9e395e08f

## 😀シゴタノ!原稿書けました。

アップします。

## 『Re:vision』の書籍化作業

Epubファイルを読み進めます。

＊　＊　＊

とりあえず、通読が終わりました。全体の構成を再検討します。

まず各ファイルの文字数から。

001 9151
002 11349
003 13859
004 16649
005 9113
006 14135

005のボリュームの小ささが若干きになる。006の冒頭は倉下の原稿なので、そちらから原稿を移植する？

005 14015
006 9567

今度は、006が短くなったが、まあ、これは最後の章なのでそれくらいでちょうどいいかも。

原稿修正の方向性：
連載時では、回と回のつなぎの文章が入っていたが、それはまるっと削れるので、削る。あと、途切れ方が違うので、その辺はメンテナンスする。

## 『Re:vision』の書籍化作業

epubを読みながらつけたハイライトの修正個所を原稿ファイルに反映させます。

＊　＊　＊

一時間ばかりかかって反映を終えました。再びepubファイルを作ります。コマンド一発で作れるのでラクチンです。

## 姪っ子にパソコンレッスン

中学生の姪っ子にパソコンを教えてきました。とりあえず第一回で、どのくらいのことを知っているか確認したので、カリキュラム作りに取り組みたいと思います。

なんだかんだで、こういうのは楽しいですね。目標は、ワードでPDF文章を作り、それをメールで添付して送信する、くらいでしょうか。

## PARA methodについて調べていました

◇The PARA Method: A Universal System for Organizing Digital Information - Forte Labs
https://fortelabs.co/blog/para/
GTDと似ていますが、少しだけアプローチが異なるオーガナイズシステム。Pproject,Area,Resource,Archiveの頭文字をとったもの。基本はプロジェクトを中心に回していく。たぶん、GTDよりも使いやすい方法論だとは想像する。
2020年9月10日 木曜日

## 『僕らの生存戦略』の執筆

まずは、2-6を固めるところから。

まずはざっと読み返しました。

## 『僕らの生存戦略』の執筆

2-6を多少読める文章に。ただ、全体はまだ固まっておらず。以前書いた原稿を参照に、もう少しこのブロックを煮込むことにします。

## 『Re:vision』の書籍化作業

epubファイルを読んで確認します。

二つ目の倉下パートを読みました。三つくらいの話が混線している感じです。並び替えというよりは、書き直した方がいいかもしれません。

## かーそる第四号の原稿を書きます

2行だけ書き足しました。微速微進。

さらに数行書き足して、この原稿で書くことをいくつかピックアップしました。それをさらに温めたのち、本格的な執筆に移りましょう。

## 「知的生産のフロンティア」について記事を書きます

R-styleになるのか、メルマガになるのかはわかりませんが。

◇知的生産のフロンティアについて考える（１） – R-style
https://rashita.net/blog/?p=30372

最近は、連載ごとにヘッダー画像（アイキャッチ画像）を作るのがマイブームです。

## 『Re:vision』の書籍化作業

2つめのTak.パートをEpubで読み進めます。

## 『Re:vision』の書籍化作業

引き続き、Tak.パートを読みます。内容を確認し、構成を考えながら読んでいるので結構時間がかかります。
2020年9月9日 水曜日

## 『僕らの生存戦略』の執筆を進めます

まずは、2-5を固めます。

＊　＊　＊

だいたい固まりました。手入れは必要ですが、方向性はこれでよし。

つづいて、2-6に進みます。ここはまだぜんぜん文章の骨子がなく文と箇条書きがとっちらかっているだけなので、それを整理するところからです。

＊　＊　＊

Progress Mapを作りました。といっても、単にテキストファイルに以下のような記述をしただけです。
￼
「←この辺」を行操作のショートカットで移動させます。

VS Codeでは、見出しだけでなく、箇条書きの下位項目も閉じられるので便利です。

## VS Codeのカスタマイズ

TODO highlightという拡張機能を入れて、progress Mapを見やすいように調整。

￼

DONE:がついている行と、TODO:がついている行の色味を変える感じです。


## 妻の昼食準備など


## 作業記録用のスクリプトを改修します

まず、現状のコードのバックアップを取っておきましょう(Gitではないのでバックアップのファイルを作成）

つづいて、HTMLファイルからjsonに変換している部分を見つけます。

ここからが、問題。どのような処理にするのか。特に、アイデアメモ以外の部分も何かしら処理することを考慮すること。

AppleScriptではなく、htmlデータを、いったんpythonに渡してもいいかもしれない、

＊　＊　＊
いったんptyhonをかませるテスト。

＊　＊　＊

ptyhonでテキストファイルへの書きだしを実行。

applescript側では、do shell scriptを実行。

do shell script "python ~/dropbox/org/convertMindgarden.py  & plist & "

plistに中身を入れておく。

ptyhonでは受け取ったデータをそのまま書き込む。

convertMindgarden.py

import sys

filepath = /Users/Tadanori/dropbox/org/data.txt

if len(sys.argv) < 2:
print(sys.argv[0])
sys.exit()

with open(filepath, mode=a) as f:
f.write(sys.argv[1])

これで、以下のようなファイルができる。

￼

上から下に並んでいるが、逆順はどうだろうか。

ただ、上に追記はちょっと面倒なことは以前も確認した（できなくはない）。いや、pythonなら結構簡単にできそう。

ということは、ｐlishへのセットを逆にして、頭に追記するようにすれば、一番先頭がトップに来るようにも作れる。

まあ、末尾はcoomand + ↓で瞬時に移動できるからどちらでもいいと言えば良いが、たとえばiPhoneなんかで開いたときは、最新がトップに来ていたほうがいいかもしれない。が、iPhoneでは、むしろMindGardenで閲覧する可能性が高い。

さて、どうするか。

いったん、散歩。

## 作業記録用のスクリプトを拡張します

新しいものを下に追記していくと、ファイルの先頭が常に同じになる。そこには変化がない。ノートと同じだが、ノートは代替わりするので、ある程度の周期で変化があるが、デジタルファイルは意図的に切り替えない限りそれがない。

上に追記していくと、開くたびにそこに変化が生まれる。それは結構楽しいはず。ただし、ファイルの上部にヘッダー要素などを書き込んでいると、ややこしいことになる。

が、書き込む行数を指定でき、ヘッダーの行数が変わらないなら、プログラムの方でなんとかできるだろう。

とりあえず、やったことがないので、上に追記型に変えてみる。

まず、配列の最後に追加していたのを最初に追加に変更する。

set end of plist to tempplist

set beginning of plist to tempplist

これで、書き込む要素が新しいもの順になった。これを、ファイルの先頭に追記する。

一度ファイルを読み込み、先頭行に追記して、その内容を書き込む、という手順。

◇Pythonでファイルの読み込み、書き込み（作成・追記） | note.nkmk.me
https://note.nkmk.me/python-file-io-open-with/

import sys

filepath = /Users/Tadanori/dropbox/org/data.txt

if len(sys.argv) < 2:
print(sys.argv[0])
sys.exit()

with open(filepath) as f:
l = f.readlines()

l.insert(0, sys.argv[1])

with open(filepath, mode=w) as f:
f.writelines(l)

できた。
￼

あとは、このテキストファイルをjsonに変換するスクリプトと、アイデアメモ以外を切り出すスクリプト。

まずは、jsonから考える。

行頭がハッシュマークなら、その行はタイトル。
ハッシュでなければ、その行は中身、という感じ。上から順に行を見ていく？

一行ごとに読み込んで、その行がハッシュで始まっていたら、それをtitleに入れる。次の行へ。
ハッシュで始まっていなければ、bodyに入れて、今tiitleとbodyに入っているものを、jsonの一データにセット、次の行へ。という感じが。

データ的に、必ずハッシュが入っている行があるので（bodyだけの行はない）、このやり方で破綻はないはず。

あと、たとえば@マークの行は読み飛ばす、とかでもいい。

まずは基本の処理。

￼

なんとか、基本の処理は書けました。

￼

だいぶ泥臭い書き方をしていますが、とりあえず通るのでよいでしょう。

￼

## 作業記録用のスクリプトを拡張します

上はまっさらな状態でファイルを作成することはできるけども、基本的にこれは「追記」するための使われる。

で、jsonファイルは単にしたに追加したらいい、というものではない。

いったんjsonのデータを読み取り、そこに追加する、という形が必要。

結構面倒ですが、とりあえず書いていきましょう。

＊　＊　＊

思ったよりは面倒ではありませんでした。冒頭にjsonファイルを読み込む処理を入れたらOK。

￼

ファイルが空っぽだとloadがエラーを吐くのでそれに対処。

￼

これで、作業記録からテキストファイルを作成、そのファイルからjsonファイルを作成（それぞれ追記スタイル）が達成できました。

ふ〜、やれやれ。

あとは、「あとで読む」とハッシュが三つついた部分の切り出しです。

ハッシュが三つついた部分は、だいたいプロジェクト関係なので、これをどう処理するか。

まず「あとで読む」は簡単で、毎日必ず項目があるので、その部分を抽出すればいい。これはアイデアノートを抜き出すのよりもずっと簡単にできるでしょう。

<h3 style="border-bottom:1.5px solid #999">あとで読む</h3><div>

が含まれているtr/tdを抽出すればOK

以下のようなHTMLが取得できます。

￼

最終的にWebページとしてアップする予定なので、プレーンテキストに変換する必要はないですね。

とりあえず、こういうファイルが作れるようになりました。

￼

このファイルの利用方法はまた考えます。

日付のデータがあってもいいかも。ノートのタイトルから取得するか、スクリプトで取得するか。

##  作業記録用のスクリプトを拡張します

問題はここから。

見出し2は時間の表示で、見出し３が雑多なメモ。見出し4がアイデアメモになっている。

見出し３を拾うと、あとで読むやおはようございますなどもひろってしまう。

拾いたくないものはh2に変えておく？　それはテンプレートの方をいじればいいから、そう難しいことではない。

h3とh4は広い、ｈ2と見出しが含まれないブロックは拾わない、というのでいいか。

あらかじめ指定しておいたプロジェクト名を含むh3があるブロックを拾うというのでもいいが、そのリストの管理が煩わしいような気もする。

高度なやり方をするならば、そのプロジェクト名でファイルを分けて保存する、となるだろう。が、そこまでやる意味はあるだろうか。

あるのはあるか。たとえば、追記されたらファイルのタイムスタンプが更新されるので、そのファイルの時系列のソートが、そのまま「最近着手したプロジェクトリスト」になる。

たとえば、プロジェクト名は、必ずかぎかっこでかこうようにして、その中の文字列でファイルを探し、ファイルがあればそこに追記、なければ新規作成。かぎかっこがないものは、統一的なファイルに保存する、という形もありえる。

さて。

＊　＊　＊

￼

上のような文字列をキーにすればいいわけだ。

とりあえず、細かく分けずに一つのファイルにまとめるようにしてみる。

￼

みだし行には何か記号を加えたほうがいいかもしれない。

冒頭に日付を入れる？

いったん散歩します。

## 作業記録用のスクリプトを拡張します

よく変更する可能性のある処理は、pythonで書いておく、という切り分けが良さそう。
AppleScriptは、Evernoteからデータを持ってくるごく基本的な部分に限定しておくのが良いと思われ。

とりあえず、日付を入れるようにしました。

￼

これで、だいぶそれらしくなってきましたね。

あとで読むの方にも日付を加えました。

￼

これで基礎的なものはだいたいOKです。ただし、コードがやたらめったらとっちらかってますね。

よくよく考えたら「あとで読む」の文字は要らないので、それを日付と差し替えました。

￼

これで骨子はできたと思います。とりあえず、数日様子を見ましょう。

あ〜、疲れた。
